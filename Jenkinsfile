pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9'  // T√™n Maven ƒë√£ c·∫•u h√¨nh trong Jenkins
        jdk 'JDK-21'       // T√™n JDK ƒë√£ c·∫•u h√¨nh trong Jenkins
    }
    
    environment {
        // Bi·∫øn m√¥i tr∆∞·ªùng
        PROJECT_NAME = 'shopee-affiliate-be'
        DOCKER_IMAGE = "${PROJECT_NAME}:${BUILD_NUMBER}"
        BRANCH_NAME = "${env.BRANCH_NAME ?: 'main'}"
    }
    
    options {
        // Gi·ªØ l·∫°i 10 build g·∫ßn nh·∫•t
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Timeout cho to√†n b·ªô pipeline l√† 30 ph√∫t
        timeout(time: 30, unit: 'MINUTES')
    }
    
    triggers {
        // Trigger khi c√≥ push v√†o GitHub
        githubPush()
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                echo 'üì• ƒêang t·∫£i code t·ª´ GitHub...'
                checkout scm
            }
        }
        
        stage('Build v·ªõi Maven') {
            steps {
                echo 'üî® ƒêang build project v·ªõi Maven...'
                script {
                    try {
                        sh '''
                            echo "Java version:"
                            java -version
                            echo "Maven version:"
                            mvn --version
                            echo "Building project..."
                            mvn clean package -DskipTests
                            echo "‚úÖ Build Maven th√†nh c√¥ng!"
                        '''
                    } catch (Exception e) {
                        echo "‚ùå L·ªói khi build: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Build JAR file') {
            steps {
                echo 'üì¶ ƒêang ƒë√≥ng g√≥i JAR file...'
                script {
                    sh """
                        # Ki·ªÉm tra file JAR ƒë√£ ƒë∆∞·ª£c build
                        ls -la target/*.jar
                        
                        # Copy JAR v√† Dockerfile ƒë·ªÉ chu·∫©n b·ªã deploy
                        mkdir -p deploy
                        cp target/*.jar deploy/app.jar
                        cp Dockerfile deploy/
                        
                        echo "‚úÖ Chu·∫©n b·ªã file deploy th√†nh c√¥ng!"
                    """
                }
            }
        }
        
        stage('Deploy to VPS') {
            steps {
                echo 'üöÄ ƒêang deploy l√™n VPS...'
                script {
                    // C√ÅCH 1: D√πng SSH Agent (c·∫ßn c·∫•u h√¨nh SSH key trong Jenkins)
                    // sshagent(['your-ssh-credential-id']) {
                    //     sh """
                    //         scp -r deploy/* user@your-vps-ip:/path/to/app/
                    //         ssh user@your-vps-ip 'cd /path/to/app && docker build -t ${DOCKER_IMAGE} . && docker restart ${PROJECT_NAME}'
                    //     """
                    // }
                    
                    // C√ÅCH 2: D√πng SSH v·ªõi password (c·∫ßn plugin SSH)
                    echo """
                    ‚ö†Ô∏è  C·∫ßn c·∫•u h√¨nh th√™m ƒë·ªÉ deploy l√™n VPS:
                    
                    1. Th√™m SSH credentials trong Jenkins
                    2. C√†i plugin 'SSH Agent' ho·∫∑c 'Publish Over SSH'
                    3. Uncomment v√† c·∫•u h√¨nh ƒëo·∫°n code SSH ph√≠a tr√™n
                    
                    Ho·∫∑c s·ª≠ d·ª•ng webhook ƒë·ªÉ trigger deploy script tr√™n VPS
                    """
                }
            }
        }
        
        stage('Verify Build') {
            steps {
                echo 'üè• Ki·ªÉm tra k·∫øt qu·∫£ build...'
                script {
                    sh """
                        echo "üìã File JAR ƒë√£ build:"
                        ls -lh target/*.jar
                        
                        echo "üìÅ N·ªôi dung th∆∞ m·ª•c deploy:"
                        ls -la deploy/
                        
                        echo "‚úÖ Build artifacts ƒë√£ s·∫µn s√†ng ƒë·ªÉ deploy!"
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline th√†nh c√¥ng!'
            echo "Build #${BUILD_NUMBER} completed successfully"
        }
        
        failure {
            echo '‚ùå Pipeline th·∫•t b·∫°i!'
            echo "Build #${BUILD_NUMBER} failed"
        }
        
        always {
            echo 'üßπ D·ªçn d·∫πp workspace...'
            cleanWs()
        }
    }
}