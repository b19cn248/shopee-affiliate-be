pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9'  // T√™n Maven ƒë√£ c·∫•u h√¨nh trong Jenkins
        jdk 'JDK-21'       // T√™n JDK ƒë√£ c·∫•u h√¨nh trong Jenkins
    }
    
    environment {
        // Bi·∫øn m√¥i tr∆∞·ªùng
        PROJECT_NAME = 'shopee-affiliate-be'
        DOCKER_IMAGE = "${PROJECT_NAME}:${BUILD_NUMBER}"
        DOCKER_IMAGE_LATEST = "${PROJECT_NAME}:latest"
        BRANCH_NAME = "${env.BRANCH_NAME ?: 'main'}"
    }
    
    options {
        // Gi·ªØ l·∫°i 10 build g·∫ßn nh·∫•t
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Timeout cho to√†n b·ªô pipeline l√† 30 ph√∫t
        timeout(time: 30, unit: 'MINUTES')
    }
    
    triggers {
        // Trigger khi c√≥ push v√†o GitHub
        githubPush()
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                echo 'üì• ƒêang t·∫£i code t·ª´ GitHub...'
                checkout scm
            }
        }
        
        stage('Build v·ªõi Maven') {
            steps {
                echo 'üî® ƒêang build project v·ªõi Maven...'
                script {
                    try {
                        sh '''
                            echo "Java version:"
                            java -version
                            echo "Maven version:"
                            mvn --version
                            echo "Building project..."
                            mvn clean package -DskipTests
                            echo "‚úÖ Build Maven th√†nh c√¥ng!"
                        '''
                    } catch (Exception e) {
                        echo "‚ùå L·ªói khi build: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ ƒêang build Docker image...'
                script {
                    sh """
                        # Build image v·ªõi tag m·ªõi
                        docker build -t ${DOCKER_IMAGE} .
                        docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE_LATEST}
                        
                        echo "‚úÖ Build Docker image th√†nh c√¥ng!"
                        docker images | grep ${PROJECT_NAME}
                    """
                }
            }
        }
        
        stage('Deploy Container') {
            steps {
                echo 'üöÄ ƒêang deploy container m·ªõi...'
                script {
                    sh """
                        # Stop v√† remove container c≈©
                        echo "D·ª´ng container c≈©..."
                        docker stop ${PROJECT_NAME} || true
                        docker rm ${PROJECT_NAME} || true
                        
                        # Run container m·ªõi t·ª´ local image
                        echo "Kh·ªüi ƒë·ªông container m·ªõi..."
                        docker run -d \\
                            --name ${PROJECT_NAME} \\
                            -p 8080:8080 \\
                            --restart unless-stopped \\
                            ${DOCKER_IMAGE_LATEST}
                        
                        echo "‚úÖ Deploy th√†nh c√¥ng!"
                        echo "üìç ·ª®ng d·ª•ng ƒëang ch·∫°y t·∫°i: http://localhost:8080"
                        
                        # Ki·ªÉm tra container status
                        docker ps | grep ${PROJECT_NAME}
                    """
                }
            }
        }
        
        stage('Cleanup Old Images') {
            steps {
                echo 'üßπ D·ªçn d·∫πp images c≈©...'
                script {
                    sh """
                        # Gi·ªØ l·∫°i 3 images g·∫ßn nh·∫•t
                        docker images | grep ${PROJECT_NAME} | tail -n +4 | awk '{print \$3}' | xargs -r docker rmi -f || true
                        
                        # X√≥a dangling images
                        docker image prune -f
                        
                        echo "‚úÖ ƒê√£ d·ªçn d·∫πp images c≈©"
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üè• Ki·ªÉm tra ·ª©ng d·ª•ng...'
                script {
                    sh """
                        # ƒê·ª£i ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
                        echo "ƒê·ª£i 15 gi√¢y ƒë·ªÉ ·ª©ng d·ª•ng kh·ªüi ƒë·ªông..."
                        sleep 15
                        
                        # Ki·ªÉm tra container
                        if docker ps | grep -q ${PROJECT_NAME}; then
                            echo "‚úÖ Container ƒëang ch·∫°y"
                            
                            # Xem logs
                            echo "üìã Logs g·∫ßn nh·∫•t:"
                            docker logs --tail 20 ${PROJECT_NAME}
                        else
                            echo "‚ùå Container kh√¥ng ch·∫°y!"
                            docker logs ${PROJECT_NAME}
                            exit 1
                        fi
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline th√†nh c√¥ng!'
            echo "Build #${BUILD_NUMBER} completed successfully"
        }
        
        failure {
            echo '‚ùå Pipeline th·∫•t b·∫°i!'
            echo "Build #${BUILD_NUMBER} failed"
        }
        
        always {
            echo 'üßπ D·ªçn d·∫πp workspace...'
            cleanWs()
        }
    }
}